version : 2.1
orbs:
  slack: circleci/slack@4.10.1
  aws-cli: circleci/aws-cli@2.0.3


commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      ID : 
        type: string  
    steps:
      - run:
          name: Destroy backend environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name Udapeople-backend-<< parameters.ID >>
      - run:
          name : Destory frontend environment
          when: on_fail
          command : |
            aws cloudformation delete-stack --stack-name Udapeople-frontend-<< parameters.ID >>

  revert-migrations:
    description: Revert the last migration
    parameters:
        workflow_id:
          type: string      
    steps:
        - run:
            name: Revert migrations
            when: on_fail
            command: |
                SUCCESS=$(curl --insecure  https://kvdb.io/9fHFr8wSN2yvn1REcLPguf/migration_<< parameters.workflow_id >>)
                if (( $SUCCESS == 1 ));
                then
                    cd ~/project/backend
                    npm install
                    npm run migration:revert
                fi  

executors:
  nodejs:
    docker:
      - image: circleci/node:13.8.0 

jobs:
  build-frontend:
    executor: nodejs
    
    steps:
      - checkout
      
      - restore_cache:
          keys: [frontend-built]

      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-built
      - run: 
          command: cat node_module

  build-backend:
    executor: nodejs
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    executor: nodejs
    steps:

      - checkout

      - restore_cache:
          keys: [frontend-test]

      - run: 
          name: Front-end test 
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/nodejs_modules]
          key: frontend-test
               
  test-backend:
    executor: nodejs
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/nodejs_modules]
          key: backend-test

  scan-frontend:
    executor: nodejs
    steps:
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-scan]
      # Your job code here
      - run :
          name : frontend test 
          command : | 
            cd frontend
            npm install
            npm audit fix --audit-level=critical
      - save_cache:
          paths: [frontend/nodeJS_modules]
          key: frontend-scan

  scan-backend:
    executor: nodejs
    steps:
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-scan]
      # Your job code here
      - run :
          name : Backend test 
          command : | 
            cd backend
            npm install
            npm audit fix --audit-level=critical
      - save_cache:
          paths: [backend/nodeJS_modules]
          key: backend-scan

  deploy-infrastructure:
    docker:
      - image : amazon/aws-cli
    steps:
      - checkout 
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          working_directory: ./.circleci/files
          command: |
            # Use the workflow id to mark your CloudFormation stacks so that you can reference them later on (ex: rollback). 
              aws cloudformation deploy \
              --template-file backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
              
      - run:
          name: Ensure front-end infrastructure exist
          working_directory: ./.circleci/files
          command: |
            # Use the workflow id to mark your CloudFormation stacks so that you can reference them later on (ex: rollback). 
              aws cloudformation deploy \
              --template-file frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

      - run:
          name: Save backend URL in BACKEND_IP
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
                      
      - run:
          name: Add backend ip to ansible inventory
          working_directory: ./.circleci/ansible
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> inventory
            cat inventory

      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory

      - destroy-environment:  
          ID: "${CIRCLE_WORKFLOW_ID:0:7}"
          
  configure-infrastructure:
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout 
      - add_ssh_keys:
          fingerprints: ["5f:a0:89:ef:32:f9:a3:ba:d0:8c:7a:f1:c5:a1:c6:e1"]
      - attach_workspace:
          at: .circleci/ansible/
      - run:
          name: Install dependencies
          working_directory: .circleci/ansible
          command: |
            apk add --update ansible
            ansible --version
      - run:
          name: Configure server
          command: |
            ansible HOST -i .circleci/ansible/inventory.txt -m ping -vvvvv
            cat .circleci/ansible/inventory.txt
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml 

      - destroy-environment:  
          ID: "${CIRCLE_WORKFLOW_ID:0:7}"
      
  run-migrations:
    executor: nodejs
    steps:
      - checkout
      - attach_workspace:
          at: .circleci/ansible/
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration status to memstash.io
          command: |   
              if grep -q "has been executed successfully." ~/backend/migrations_dump.txt
              then
                  # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
                  curl https://kvdb.io/9fHFr8wSN2yvn1REcLPguf/migration_$\{CIRCLE_WORKFLOW_ID:0:7\}  -d 1
              fi     
              echo "workflow_id=${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}


  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt -y update && sudo apt install -y python3
            apk add --update ansible
            ansible --version
            sudo apt-get install -y npm 
            sudo apt-get install -y node
            
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances...............)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      - persist_to_workspace:
          root: .
          paths:
            - frontend/dist
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
      # Here's where you will add some code to rollback on failure  

  deploy-backend:
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["5f:a0:89:ef:32:f9:a3:ba:d0:8c:7a:f1:c5:a1:c6:e1"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: /tmp
          command: |
            apk add --update ansible curl rsync openssh nodejs npm
            ansible --version
            pip install awscli
            aws --version
      - run:
          name: Deploy backend
          working_directory: ./.circleci/ansible
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            cat inventory
            ansible-playbook -i inventory deploy-server.yaml -vv
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: /tmp
          command: |
            apk add --update curl nodejs npm
            pip install awscli
      - run:
          name: Backend smoke test.
          working_directory: ./backend
          command: |
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          working_directory: ./backend
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
              return 1
            else
              return 1
            fi
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - revert_migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip curl
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs
      - run:
          name: Update cloudfront distribution
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
      - revert_migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
          

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Clean up old environment
          command: |
            
            export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
                    
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"
            CurrentWorkflowID=${CIRCLE_WORKFLOW_ID:0:7}
            if [[ "$CurrentWorkflowID" != "$OldWorkflowID" ]]
            then
              echo "$OldWorkflowID!=$CurrentWorkflowID => will delete old version"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
             else
              echo "$OldWorkflowID==$CurrentWorkflowID => nothing needs to be done..."
            fi
workflows:
  default:
    jobs:
      - deploy-infrastructure:
          filters:
            branches:
              only:
                - master
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
            