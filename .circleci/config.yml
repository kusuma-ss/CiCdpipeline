version : 2.1
orbs:
  slack: circleci/slack@4.10.1
  aws-cli: circleci/aws-cli@2.0.3


commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      ID : 
        type: string  
    steps:
      - run:
          name: Destroy backend environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name Udapeople-backend-ID 
      - run:
          name : Destory frontend environment
          when: on_fail
          command : |
            aws cloudformation delete-stack --stack-name Udapeople-frontend-ID




executors:
  nodejs:
    docker:
      - image: circleci/node:13.8.0 

jobs:
  build-frontend:
    executor: nodejs
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    executor: nodejs
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    executor: nodejs
    steps:

      - checkout

      - restore_cache:
          keys: [frontend-test]

      - run: 
          name: Front-end test 
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/nodejs_modules]
          key: frontend-test
               
  test-backend:
    executor: nodejs
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/nodejs_modules]
          key: backend-test

  scan-frontend:
    executor: nodejs
    steps:
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-scan]
      # Your job code here
      - run :
          name : frontend test 
          command : | 
            cd frontend
            npm install
            npm audit fix --audit-level=critical
      - save_cache:
          paths: [frontend/nodeJS_modules]
          key: frontend-scan

  scan-backend:
    executor: nodejs
    steps:
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-scan]
      # Your job code here
      - run :
          name : Backend test 
          command : | 
            cd backend
            npm install
            npm audit fix --audit-level=critical
      - save_cache:
          paths: [backend/nodeJS_modules]
          key: backend-scan

  deploy-infrastructure:
    docker:
      - image : amazon/aws-cli
    steps:
      - checkout 
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          working_directory: ./.circleci/files
          command: |
            # Use the workflow id to mark your CloudFormation stacks so that you can reference them later on (ex: rollback). 
              aws cloudformation deploy \
              --template-file backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople 
              
      - run:
          name: Ensure front-end infrastructure exist
          working_directory: ./.circleci/files
          command: |
            # Use the workflow id to mark your CloudFormation stacks so that you can reference them later on (ex: rollback). 
              aws cloudformation deploy \
              --template-file frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
                      
      - run:
          name: Add back-end ip to ansible inventory
          working_directory: ./.circleci/ansible
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >> inventory.txt
            
            cat inventory.txt

      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory.txt

      - destroy-environment:  
          ID: "${CIRCLE_WORKFLOW_ID:0:7}"
          
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout 
      - add_ssh_keys:
          fingerprints: ["5f:a0:89:ef:32:f9:a3:ba:d0:8c:7a:f1:c5:a1:c6:e1"]
      - attach_workspace:
          at: .circleci/ansible/
      - run:
          name: Install dependencies
          working_directory: .circleci/ansible
          command: |
            apk add --update ansible
            ansible --version
      - run:
          name: Configure server
          command: |
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml

      - destroy-environment:  
          ID: "${CIRCLE_WORKFLOW_ID:0:7}"
      
  run-migrations:
    executor: nodejs
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration status to memstash.io
          command: |   
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
                  # If you are using memstash.io, generate the token "7933fe63-4687-4fa1-8426-aa25aa1730ec" on the website
                  curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
                  # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
                  curl https://kvdb.io/9GE4jRtKznmVKRfvdBABBe/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              fi
     # Here's where you will add some code to rollback on failure     

workflows:
  default:
    jobs: 
      - configure-infrastructure
         