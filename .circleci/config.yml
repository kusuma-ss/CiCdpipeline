version : 2.1
orbs:
  slack: circleci/slack@4.10.1


commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Key : ID
      Value: string  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-ID
            aws cloudformation delete-stack --stack-name udapeople-frontend-ID

            exit 1


executors:
  nodejs:
    docker:
      - image: circleci/node:13.8.0 

jobs:
  build-frontend:
    executor: nodejs
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    executor: nodejs
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    executor: nodejs
    steps:

      - checkout

      - restore_cache:
          keys: [frontend-test]

      - run: 
          name: Front-end test 
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/nodejs_modules]
          key: frontend-test
               
  test-backend:
    executor: nodejs
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/nodejs_modules]
          key: backend-test

  scan-frontend:
    executor: nodejs
    steps:
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-scan]
      # Your job code here
      - run :
          name : frontend test 
          command : | 
            cd frontend
            npm install
            npm audit fix --audit-level=critical
      - save_cache:
          paths: [frontend/nodeJS_modules]
          key: frontend-scan

  scan-backend:
    executor: nodejs
    steps:
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-scan]
      # Your job code here
      - run :
          name : Backend test 
          command : | 
            cd backend
            npm install
            npm audit fix --audit-level=critical
      - save_cache:
          paths: [backend/nodeJS_modules]
          key: backend-scan

  deploy-infrastructure:
      docker:
        - image : amazon/aws-cli
      steps:
        - checkout 
        - run:
            name: Ensure back-end infrastructure exists
            command: |
              aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --tags project=your-tag \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} " \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
                exit 1
        - run:
            name: Ensure front-end infrastructure exist
            command: |
              aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --tags project=your-tag \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
                exit 1
        - run:
            name: Add back-end ip to ansible inventory
            working_directory: ./.circleci/ansible
            command: |
              aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> inventory.txt
              exit 1
        - persist_to_workspace:
            root: ~/
            paths:
              - project/.circleci/ansible/inventory.txt
        - destory_environment :  
            ID="${CIRCLE_WORKFLOW_ID:0:7}" 


        

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]